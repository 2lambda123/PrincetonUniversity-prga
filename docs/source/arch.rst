Architecture & Customizability
==============================

.. image:: /_static/images/zoomx3.png
   :width: 100 %
   :alt: PRGA Architecture Hierarchy
   :align: center

The FPGA architecture supported by PRGA is highly customizable and flexible.
As shown in the figure above, the FPGA is organized as a 2-dimensional
:ref:`Array` of :ref:`Tile` s, :ref:`Switch Box<Connection and Switch Box>`
es, and nested :ref:`Array` s.
Each :ref:`Tile` contains one :ref:`Logic Block<Logic and IO Block>` or
multiple :ref:`IO Block<Logic and IO Block>` s, in addition to various
numbers of :ref:`Connection Box<Connection and Switch Box>` es.
Each :ref:`Logic Block<Logic and IO Block>` or :ref:`IO Block<Logic and IO
Block>` consists of zero to many :ref:`Slice` s
and :ref:`Logic Primitive` s.
:ref:`Slice` s are composed of nested :ref:`Slice` s and :ref:`Logic Primitive` s.
Readers familiar with `VPR`_ should find these concept pretty intuitive.

.. _VPR: https://verilogtorouting.org/

Module View
-----------

Before diving into each type of modules listed above, let's get familiar with an
important concept in PRGA first: **Module Views** (`ModuleView`).

The ultimate goal of PRGA's :ref:`FPGA Design` flow is to generate synthesizable
RTL (register-transfer level) Verilog for a customized FPGA architecture, and
produce FPGA CAD scripts (not the ASIC implementation scripts) that correspond
to the FPGA.
However, FPGA CAD tools only need, and only take, a functional abstraction of
the FPGA, ignoring most of the implementation details.
For example, different modes of a multi-modal :ref:`Logic Primitive` are typically
modeled as different blocks in `VPR`_ despite that the whole primitive is
usually a single module in RTL.
The figure below shows a fracturable ``LUT3`` that can be used as two ``LUT2`` s
with shared inputs.

.. figure:: /_static/images/FracLUT3_Abstract.png
    :width: 400px
    :alt: Two Abstract Modes of Fracturable LUT3
    :align: center
   
    Abstract modes of Fracturable LUT3


.. figure:: /_static/images/FracLUT3_Design.png
    :width: 400px
    :alt: Design view of Fracturable LUT3
    :align: center

    Design view (schematic) of Fracturable LUT3. Mode selection bit highlighted
    by red circle

.. _Yosys: http://www.clifford.at/yosys
.. _VPR: https://verilogtorouting.org/

To incorporate various information needed by different third-party tools, PRGA
adopts the concept of ``View`` s widely used in the EDA world.
Each module may have different views, and different views are used in different
steps.

Currently, PRGA uses two views: `ModuleView.abstract`, and `ModuleView.design`.

Abstract View
^^^^^^^^^^^^^

The `ModuleView.abstract` view is mostly used during the :ref:`Architecture
Customization` step, and in FPGA CAD script generation passes.
Modules in the `ModuleView.abstract` view have the following features:

- **Allows any net to be driven by multiple drivers.** PRGA uses this to
  represent reconfigurable connections.
- **Does not contain configuration nets or modules.**

Design View
^^^^^^^^^^^

The `ModuleView.design` view is used in RTL generation, therefore contains
accurate information about all the nets and modules in the FPGA.
Except for :ref:`Logic Primitive` s, the `ModuleView.design` view of most modules
is generated by the `Translation` pass based on the user-specified
`ModuleView.abstract` view, and then completed by the ``*.InsertProgCircuitry``
pass.

Logic Primitive
---------------

Work in progress.

Slice
-----

Work in progress.

Logic and IO Block
------------------

Work in progress.

Connection and Switch Box
-------------------------

Work in progress.

Tile
----

Work in progress.

Array
-----

Work in progress.
