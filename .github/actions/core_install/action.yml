name: Install prga.py

description: |
  Check if pyenv, Python binary, prga.py and virtual environment are cached.
  If so, check if the cached copies match the submodule commit SHA-1 of the
  latest commit. If so, use cache; otherwise, reinstall.

inputs:
  python-version:
    description: Python version for running prga.py
    required: true
    default: 3.8.2

runs:
  using: composite
  steps:
    - name: Cache pyenv
      id: cache-pyenv
      uses: actions/cache@v2
      with:
        path: pyenv
        key: ${{ inputs.python-version }}

    - name: Checkout pyenv
      if: ${{ ! steps.cache-pyenv.outputs.cache-hit }}
      uses: actions/checkout@v2
      with:
        repository: pyenv/pyenv
        path: pyenv

    - name: Activate pyenv and install the required Python version
      if: ${{ ! steps.cache-pyenv.outputs.cache-hit }}
      run: |
        export PYENV_ROOT=${PWD}/pyenv
        export PATH=${PYENV_ROOT}/bin:$PATH
        eval "$( pyenv init - )"
        env PYTHON_CONFIGURE_OPTS="--enable-shared" CFLAGS="-fPIC" CXXFLAGS="-fPIC" pyenv install -s ${{ inputs.python-version }}
        pyenv local ${{ inputs.python-version }}
        pip install --upgrade setuptools pip pipenv

    - name: Check submodule's commit SHA-1
      id: sha
      run: echo "::set-output name=sha::$(git submodule status prga.py | awk '{print $1}')"

    - name: Cache prga.py
      id: cache-prga-py
      uses: actions/cache@v2
      with:
        path: prga.py
        key: core-${{ steps.sha.outputs.sha }}

    - name: Create virtualenv for prga.py
      if: ${{ ! steps.cache-prga-py.outputs.cache-hit }}
      run: |
        export PYENV_ROOT=${PWD}/pyenv
        export PATH=${PYENV_ROOT}/bin:$PATH
        eval "$( pyenv init - )"
        pyenv local ${{ inputs.python-version }}
        git submodule update --init --recursive prga.py
        pushd prga.py
        PIPENV_VENV_IN_PROJECT=1 pipenv --python ${{ inputs.python-version }} install -e .[cocotb]
