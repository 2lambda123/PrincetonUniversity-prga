# CI on the dev branch
name: dev-ci

# Controls when the action will run. 
on:

  push:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  # Install PRGA
  install:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps
    steps:
      # shared variables
      - name: Shared variables
        id: var
        run: echo "::set-output name=python-version::3.8.2"

      # Checks-out repository
      - name: Checkout PRGA
        uses: actions/checkout@v2
        with:
          ref: dev

      # ========================================================
      # == Restore iverilog from cache, or build from scratch ==
      # ========================================================
      - name: Cache iverilog
        id: cache-ivl
        uses: actions/cache@v2
        with:
          path: iverilog
          key: iverilog

      - name: Checkout iverilog
        uses: actions/checkout@v2
        if: ${{ ! steps.cache-ivl.outputs.cache-hit }}
        with:
          repository: steveicarus/iverilog
          path: iverilog

      - name: Compile iverilog
        if: ${{ ! steps.cache-ivl.outputs.cache-hit }}
        run: |
          sudo apt-get install gperf autoconf
          pushd iverilog
          sh autoconf.sh
          ./configure --prefix=${GITHUB_WORKSPACE}/local
          make -j8
          popd

      - name: Install iverilog
        run: |
          pushd iverilog
          make install
          popd

      # ==============================================================
      # == Restore VTR/Yosys/core from cache, or build from scratch ==
      # ==============================================================
      - name: Check submodule's commit SHA-1
        id: submodule-sha
        run: |
          echo "::set-output name=vtr::$(git submodule status vtr | awk '{print $1}')"
          echo "::set-output name=yosys::$(git submodule status yosys | awk '{print $1}')"
          echo "::set-output name=core::$(git submodule status prga.py | awk '{print $1}')"

      # == Restore VTR ==
      - name: Cache VTR executables
        id: cache-vtr
        uses: actions/cache@v2
        with:
          path: |
            local/bin/vpr
            local/bin/genfasm
          key: vtr-${{ steps.submodule-sha.outputs.vtr }}

      - name: Checkout submodule VTR, compile, and install
        if: ${{ ! steps.cache-vtr.outputs.cache-hit }}
        run: |
          git submodule update --init --recursive vtr
          pushd vtr
          make -j8
          popd
          mkdir -p local/bin
          cp vtr/vpr/vpr local/bin/vpr
          cp vtr/build/utils/fasm/genfasm local/bin/genfasm

      # == Restore Yosys ==
      - name: Cache Yosys executables and libraries
        id: cache-yosys
        uses: actions/cache@v2
        with:
          path: |
            local/bin/yosys
            local/bin/yosys-*
            local/share/yosys
          key: yosys-${{ steps.submodule-sha.outputs.yosys }}

      - name: Checkout submodule yosys, compile, and install
        if: ${{ ! steps.cache-yosys.outputs.cache-hit }}
        run: |
          sudo apt-get install tcl8.6-dev
          git submodule update --init --recursive yosys
          pushd yosys
          make -j8 CONFIG=gcc
          make install CONFIG=gcc PREFIX=${GITHUB_WORKSPACE}/local
          popd

      # == Restore pyenv ==
      - name: Cache pyenv
        id: cache-pyenv
        uses: actions/cache@v2
        with:
          path: pyenv
          key: ${{ steps.var.outputs.python-version }}

      - name: Checkout pyenv
        if: ${{ ! steps.cache-pyenv.outputs.cache-hit }}
        uses: actions/checkout@v2
        with:
          repository: pyenv/pyenv
          path: pyenv

      - name: Activate pyenv and install the required Python version
        if: ${{ ! steps.cache-pyenv.outputs.cache-hit }}
        run: |
          export PYENV_ROOT=${PWD}/pyenv
          export PATH=${PYENV_ROOT}/bin:$PATH
          eval "$( pyenv init - )"
          env PYTHON_CONFIGURE_OPTS="--enable-shared" CFLAGS="-fPIC" CXXFLAGS="-fPIC" pyenv install -s ${{ steps.var.outputs.python-version }}
          pyenv local ${{ steps.var.outputs.python-version }}
          pip install --upgrade setuptools pip pipenv

      # == Restore prga.py ==
      - name: Cache prga.py
        id: cache-prga-py
        uses: actions/cache@v2
        with:
          path: prga.py
          key: core-${{ steps.submodule-sha.outputs.core }}

      - name: Create virtualenv for prga.py
        if: ${{ ! steps.cache-prga-py.outputs.cache-hit }}
        run: |
          export PYENV_ROOT=${PWD}/pyenv
          export PATH=${PYENV_ROOT}/bin:$PATH
          eval "$( pyenv init - )"
          pyenv local ${{ steps.var.outputs.python-version }}
          git submodule update --init --recursive prga.py
          pushd prga.py
          PIPENV_VENV_IN_PROJECT=1 pipenv --python ${{ steps.var.outputs.python-version }} install -e .[cocotb]

      # ======================
      # == Upload artifacts ==
      # ======================
      - name: Upload PRGA artifact
        uses: actions/upload-artifact@v2
        with:
          name: executables
          path: |
            local
            pyenv
            prga.py

  # Run tests
  test-bcd2bin-magic-k4_N2_8x8:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # job dependency
    needs: [ install ]

    # Steps
    steps:
      # Checks-out repository
      - name: Checkout PRGA
        uses: actions/checkout@v2
        with:
          ref: dev

      # Downloads executables
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: executables

      # Run test
      - name: Run 'basic' Test for Design 'bcd2bin' on FPGA 'magic/k4_N2_8x8'
        uses: ./.github/actions/run_example
        with:
          fpga_path: magic/k4_N2_8x8
          design_path: bcd2bin/magic_k4_N2_8x8
          test: basic

            #   # Run tests
            #   build-magic-k4_N2_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # Checks-out repository
            #       - name: Checkout PRGA
            #         uses: actions/checkout@v2
            #         with:
            #           ref: dev
            # 
            #       # build the FPGA
            #       - name: "Build FPGA: magic/k4_N2_8x8"
            #         uses: ./.github/actions/build_fpga_example.yml
            #         with:
            #           path: magic/k4_N2_8x8
            # 
            #   run-bcd2bin-magic-k4_N2_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-magic-k4_N2_8x8 ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: magic/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_k4_N2_8x8 && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: magic/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_k4_N2_8x8/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: magic/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_k4_N2_8x8/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: magic/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_k4_N2_8x8/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: magic/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_k4_N2_8x8/tests/basic postimpl && popd
            # 
            #   build-magic-grady18_N2_10x6:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: magic/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/magic/grady18_N2_10x6 && popd
            # 
            #   run-bcd2bin-magic-grady18_N2_10x6:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-magic-grady18_N2_10x6 ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: magic/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18_N2_10x6 && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: magic/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18_N2_10x6/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: magic/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18_N2_10x6/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: magic/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18_N2_10x6/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: magic/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18_N2_10x6/tests/basic postimpl && popd
            # 
            #   build-magic-grady18v2_N2_8x8_hier:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: magic/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/magic/grady18v2_N2_8x8_hier && popd
            # 
            #   run-bcd2bin-magic-grady18v2_N2_8x8_hier:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-magic-grady18v2_N2_8x8_hier ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: magic/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18v2_N2_8x8_hier && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: magic/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18v2_N2_8x8_hier/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: magic/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18v2_N2_8x8_hier/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: magic/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18v2_N2_8x8_hier/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: magic/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_grady18v2_N2_8x8_hier/tests/basic postimpl && popd
            # 
            #   build-magic-fle6_N2_mem2K_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: magic/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/magic/fle6_N2_mem2K_8x8 && popd
            # 
            #   run-bcd2bin-magic-fle6_N2_mem2K_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-magic-fle6_N2_mem2K_8x8 ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: magic/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_fle6_N2_mem2K_8x8 && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: magic/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_fle6_N2_mem2K_8x8/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: magic/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_fle6_N2_mem2K_8x8/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: magic/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_fle6_N2_mem2K_8x8/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: magic/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/magic_fle6_N2_mem2K_8x8/tests/basic postimpl && popd
            # 
            #   build-scanchain-k4_N2_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: scanchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/scanchain/k4_N2_8x8 && popd
            # 
            #   run-bcd2bin-scanchain-k4_N2_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-scanchain-k4_N2_8x8 ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: scanchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_k4_N2_8x8 && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: scanchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_k4_N2_8x8/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: scanchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_k4_N2_8x8/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: scanchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_k4_N2_8x8/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: scanchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_k4_N2_8x8/tests/basic postimpl && popd
            # 
            #   build-scanchain-grady18_N2_10x6:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: scanchain/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/scanchain/grady18_N2_10x6 && popd
            # 
            #   run-bcd2bin-scanchain-grady18_N2_10x6:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-scanchain-grady18_N2_10x6 ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: scanchain/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18_N2_10x6 && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: scanchain/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18_N2_10x6/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: scanchain/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18_N2_10x6/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: scanchain/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18_N2_10x6/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: scanchain/grady18_N2_10x6"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18_N2_10x6/tests/basic postimpl && popd
            # 
            #   build-scanchain-grady18v2_N2_8x8_hier:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: scanchain/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/scanchain/grady18v2_N2_8x8_hier && popd
            # 
            #   run-bcd2bin-scanchain-grady18v2_N2_8x8_hier:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-scanchain-grady18v2_N2_8x8_hier ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: scanchain/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18v2_N2_8x8_hier && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: scanchain/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18v2_N2_8x8_hier/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: scanchain/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18v2_N2_8x8_hier/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: scanchain/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18v2_N2_8x8_hier/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: scanchain/grady18v2_N2_8x8_hier"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_grady18v2_N2_8x8_hier/tests/basic postimpl && popd
            # 
            #   build-scanchain-fle6_N2_mem2K_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: scanchain/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/scanchain/fle6_N2_mem2K_8x8 && popd
            # 
            #   run-bcd2bin-scanchain-fle6_N2_mem2K_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-scanchain-fle6_N2_mem2K_8x8 ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: scanchain/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_fle6_N2_mem2K_8x8 && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: scanchain/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_fle6_N2_mem2K_8x8/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: scanchain/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_fle6_N2_mem2K_8x8/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: scanchain/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_fle6_N2_mem2K_8x8/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: scanchain/fle6_N2_mem2K_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/scanchain_fle6_N2_mem2K_8x8/tests/basic postimpl && popd
            # 
            #   build-pktchain-k4_N2_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ install ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Build FPGA: pktchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/fpga/pktchain/k4_N2_8x8 && popd
            # 
            #   run-bcd2bin-pktchain-k4_N2_8x8:
            #     # The type of runner that the job will run on
            #     runs-on: ubuntu-latest
            # 
            #     # job dependency
            #     needs: [ build-pktchain-k4_N2_8x8 ]
            # 
            #     # Steps
            #     steps:
            #       # build the FPGA
            #       - name: "Make project for design bcd2bin on FPGA: pktchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/pktchain_k4_N2_8x8 && popd
            # 
            #       # generate bitstream
            #       - name: "Generate bitstream for design bcd2bin on FPGA: pktchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/pktchain_k4_N2_8x8/design && popd
            # 
            #       # run behavioral simulation
            #       - name: "Behavioral simulation of design bcd2bin on FPGA: pktchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/pktchain_k4_N2_8x8/tests/basic behav && popd
            # 
            #       # run post-synthesis simulation 
            #       - name: "Post-Synthesis simulation of design bcd2bin on FPGA: pktchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/pktchain_k4_N2_8x8/tests/basic postsyn && popd
            # 
            #       # run post-implentation simulation
            #       - name: "Post-Implementation simulation of design bcd2bin on FPGA: pktchain/k4_N2_8x8"
            #         run: pushd ${GITHUB_WORKSPACE} && bash envscr/run make -C ${PWD}/examples/target/bcd2bin/pktchain_k4_N2_8x8/tests/basic postimpl && popd
            # 
