# Automatically generated by PRGA Simproj generator
TESTBENCH_SRC := {{ testbench }}
TARGET := {{ target }}
TARGET_SRCS := {{ target_sources|join(' ') }}
TARGET_FLAGS :={% for inc in target_includes %} {% if compiler == 'iverilog' %}-I{{ inc }}{% elif compiler == 'vcs' %}+incdir+{{ inc }}{% endif %}{% endfor %}
TARGET_FLAGS +={% for macro in target_defines %} {% if compiler == 'iverilog' %}-D{{ macro }}{% elif compiler == 'vcs' %}+define+{{ macro }}{% endif %}{% endfor %}
HOST_SRCS := {{ host_sources|join(' ') }}
HOST_FLAGS :={% for inc in host_includes %} {% if compiler == 'iverilog' %}-I{{ inc }}{% elif compiler == 'vcs' %}+incdir+{{ inc }}{% endif %}{% endfor %}
HOST_FLAGS +={% for macro in host_defines %} {% if compiler == 'iverilog' %}-D{{ macro }}{% elif compiler == 'vcs' %}+define+{{ macro }}{% endif %}{% endfor %}
HOST_ARGS := {{ host_args|join(' ') }}
ARCH_WIDTH := {{ arch_width }}
ARCH_HEIGHT := {{ arch_height }}
VPR_CHAN_WIDTH := {{ vpr_chan_width }}
VPR_IOBINDING := {{ io_bindings }}
VPR_ARCHDEF := {% if fpga_prefix %}{{ fpga_prefix }}/{%- endif %}{{ vpr_archdef }}
VPR_RRGRAPH := {% if fpga_prefix %}{{ fpga_prefix }}/{%- endif %}{{ vpr_rrgraph }}
VPR_CONFIGDB := {% if fpga_prefix %}{{ fpga_prefix }}/{%- endif %}{{ config_db }}
FPGA_RTL := {% if fpga_prefix %}{{ fpga_prefix }}/{%- endif %}{{ rtl_dir }}
BITGEN := prga-bitgen-{{ arch_config_type }}
BITGEN_ARGS := {{ bitgen_args }}
YOSYS_SCRIPT := {{ synth }}
{# compiler options #}
{%- if compiler == 'iverilog' %}
COMP := iverilog
FLAGS := -g2005 -gspecify
{%- elif compiler == 'vcs' %}
COMP := vcs
FLAGS := -full64 -v2005
{%- endif %}

LOGIC_SIM := lsim
LOGIC_SIM_LOG := $(LOGIC_SIM).log
LOGIC_SIM_WAVEFORM := $(LOGIC_SIM).vcd
IMPLEMENTATION_SIM := isim
IMPLEMENTATION_SIM_LOG := $(IMPLEMENTATION_SIM).log
IMPLEMENTATION_SIM_WAVEFORM := $(IMPLEMENTATION_SIM).vcd
{%- if post_synthesis_sim %}

POST_SYNTHESIS_SIM := psim
POST_SYNTHESIS_SIM_LOG := $(POST_SYNTHESIS_SIM).log
POST_SYNTHESIS_SIM_WAVEFORM := $(POST_SYNTHESIS_SIM).vcd
POST_SYNTHESIS_LIBS := $(VTR_ROOT)/vtr_flow/primitives.v
POST_SYNTHESIS_SRCS := $(TARGET)_post_synthesis.v
POST_SYNTHESIS_EXTRAS := $(TARGET)_post_synthesis.blif $(TARGET)_post_synthesis.sdf
{%- endif %}

# Generated variables and rules
BLIF := $(TARGET).blif
VPR_PACK := $(TARGET).net
VPR_PACK_REMAPPED := $(TARGET).remapped.net
VPR_PLACE := $(TARGET).place
VPR_ROUTE := $(TARGET).route
VPR_PNR := $(VPR_PLACE) $(VPR_ROUTE){% if post_synthesis_sim %} $(POST_SYNTHESIS_SRCS) $(POST_SYNTHESIS_EXTRAS){% endif %}
BITSTREAM := $(TARGET).memh

.PHONY: verify synth pack pnr bitgen clean disp waveform makefile_validation_
verify: $(IMPLEMENTATION_SIM_LOG) $(LOGIC_SIM_LOG){% if post_synthesis_sim %} $(POST_SYNTHESIS_SIM_LOG){% endif %} makefile_validation_
	@echo '********************************************'
	@echo '**                 Report                 **'
	@echo '********************************************'
	@grep "all tests passed" $(LOGIC_SIM_LOG) || echo " (!) logic simulation failed"
	{%- if post_synthesis_sim %}
	@grep "all tests passed" $(POST_SYNTHESIS_SIM_LOG) || echo " (!) post synthesis simulation failed"
	{%- endif %}
	@grep "all tests passed" $(IMPLEMENTATION_SIM_LOG) || echo " (!) implementation simulation failed"
	@echo '********************************************'

synth: $(BLIF) makefile_validation_

pack: $(VPR_PACK_REMAPPED) makefile_validation_

pnr: $(VPR_PNR) makefile_validation_

bitgen: $(BITSTREAM) makefile_validation_

waveform: $(IMPLEMENTATION_SIM_WAVEFORM) $(LOGIC_SIM_WAVEFORM){% if post_synthesis_sim %} $(POST_SYNTHESIS_SIM_WAVEFORM){% endif %} makefile_validation_

clean: makefile_validation_
	rm -rf $(BLIF) $(VPR_PACK) $(VPR_PACK_REMAPPED) $(VPR_PNR) $(BITSTREAM) *.rpt *.log
	rm -rf $(LOGIC_SIM) $(LOGIC_SIM_LOG) $(LOGIC_SIM_WAVEFORM)
	rm -rf $(IMPLEMENTATION_SIM) $(IMPLEMENTATION_SIM_LOG) $(IMPLEMENTATION_SIM_WAVEFORM)
	{%- if post_synthesis_sim %}
	rm -rf $(POST_SYNTHESIS_SIM) $(POST_SYNTHESIS_SIM_LOG) $(POST_SYNTHESIS_SIM_WAVEFORM) $(POST_SYNTHESIS_SRCS) $(POST_SYNTHESIS_EXTRAS)
	{%- endif %}
	rm -rf csrc *.daidir ucli.key

disp: $(VPR_PNR) makefile_validation_
	vpr $(VPR_ARCHDEF) $(BLIF) --net_file $(VPR_PACK_REMAPPED) --place_file $(VPR_PLACE) \
		--route_file $(VPR_ROUTE) --route_chan_width $(VPR_CHAN_WIDTH) --read_rr_graph $(VPR_RRGRAPH) \
		--analysis --disp on

$(BLIF): $(TARGET_SRCS) $(YOSYS_SCRIPT)
	yosys -o $@ $(YOSYS_SCRIPT)

$(VPR_PACK): $(VPR_ARCHDEF) $(BLIF)
	vpr $^ --pack --constant_net_method route

$(VPR_PACK_REMAPPED): $(VPR_PACK)
	python -m prga.tools.ioremap -x $(ARCH_WIDTH) -y $(ARCH_HEIGHT) -b $(VPR_IOBINDING) -i $< -o $@

$(VPR_PNR): $(VPR_ARCHDEF) $(BLIF) $(VPR_RRGRAPH) $(VPR_PACK_REMAPPED) $(VPR_IOBINDING)
	vpr $(VPR_ARCHDEF) $(BLIF) --net_file $(VPR_PACK_REMAPPED) \
		--place --fix_pins $(VPR_IOBINDING) \
		--route --route_chan_width $(VPR_CHAN_WIDTH) --read_rr_graph $(VPR_RRGRAPH){% if post_synthesis_sim %} \
		--gen_post_synthesis_netlist on{% endif %}

$(BITSTREAM): $(BLIF) $(VPR_CONFIGDB) $(VPR_PACK_REMAPPED) $(VPR_PNR)
	$(BITGEN) -c $(VPR_CONFIGDB) -b $(BLIF) -n $(VPR_PACK_REMAPPED) -p $(VPR_PLACE) -r $(VPR_ROUTE) \
		--output_memh=$@ --verbose=trace $(BITGEN_ARGS)

$(LOGIC_SIM): $(TESTBENCH_SRC) $(HOST_SRCS) $(TARGET_SRCS)
	$(COMP) $(FLAGS) $(HOST_FLAGS) $(TARGET_FLAGS) $< -o $@ \
		$(addprefix -v ,$(HOST_SRCS) $(TARGET_SRCS))

$(LOGIC_SIM_LOG): $(LOGIC_SIM)
	./$< $(HOST_ARGS) | tee $@

$(LOGIC_SIM_WAVEFORM): $(LOGIC_SIM)
	./$< $(HOST_ARGS) +dump_file=$@

$(IMPLEMENTATION_SIM): $(TESTBENCH_SRC) $(HOST_SRCS)
	$(COMP) $(FLAGS) $(HOST_FLAGS)
		{%- if compiler == 'iverilog' %} -DFPGA_TEST{% if fake_prog %} -DFAKE_PROG{% endif %}
		{%- elif compiler == 'vcs' %} +define+FPGA_TEST{% if fake_prog %}+FAKE_PROG{% endif %}{% endif %} \
		$< -o $@ $(addprefix -v ,$(wildcard $(FPGA_RTL)/*.v)) $(addprefix -v ,$(HOST_SRCS))

$(IMPLEMENTATION_SIM_LOG): $(IMPLEMENTATION_SIM) $(BITSTREAM)
	./$< $(HOST_ARGS) +bitstream_memh=$(BITSTREAM) | tee $@

$(IMPLEMENTATION_SIM_WAVEFORM): $(IMPLEMENTATION_SIM)
	./$< $(HOST_ARGS) +bitstream_memh=$(BITSTREAM) +dump_file=$@
{%- if post_synthesis_sim %}

$(POST_SYNTHESIS_SIM): $(TESTBENCH_SRC) $(HOST_SRCS) $(POST_SYNTHESIS_SRCS) $(POST_SYNTHESIS_LIBS)
	$(COMP) $(FLAGS) $(HOST_FLAGS)
		{%- if compiler == 'iverilog' %} -DPOST_SYNTHESIS_SIM
		{%- elif compiler == 'vcs' %} +define+POST_SYNTHESIS_SIM{% endif %} \
		$< -o $@ $(addprefix -v ,$(HOST_SRCS) $(POST_SYNTHESIS_SRCS) $(POST_SYNTHESIS_LIBS))

$(POST_SYNTHESIS_SIM_LOG): $(POST_SYNTHESIS_SIM)
	./$< $(HOST_ARGS) | tee $@

$(POST_SYNTHESIS_SIM_WAVEFORM): $(POST_SYNTHESIS_SIM)
	./$< $(HOST_ARGS) +dump_file=$@
{%- endif %}

{# compiler options #}
{%- if compiler not in ['iverilog', 'vcs'] %}
makefile_validation_:
	echo "Unknown compiler option: {{ compiler }}. This generated Makefile is invalid"
	exit 1
{%- else %}
makefile_validation_: ;
{%- endif %}
