# Python 2 and 3 compatible
from prga.compatible import *

"""Generate the simulation project's Makefile."""

import jinja2 as jj
import os
import sys

_py3 = sys.version_info >= (3, )

def generate_makefile(context, output, target, target_sources, target_includes, target_defines,
        host_sources, host_includes, host_defines, host_args, io_bindings, testbench, synth, compiler,
        fpga_prefix = None, post_synthesis_sim = False,
        vpr_archdef = 'arch.vpr.xml',
        vpr_rrgraph = 'rrg.vpr.xml',
        config_db = 'config.db',
        rtl_dir = 'rtl',
        fake_prog = False,
        **kwargs):
    """Generate the simulation project's Makefile.

    Args:
        context (`ArchitectureContext`): the architecture context of the custom FPGA
        output (:obj:`str`): the name of the output file
        target (:obj:`str`): the name of the top-level target Verilog module
        target_sources (:obj:`list` [:obj:`str` ]): a list of target source files
        target_includes (:obj:`list` [:obj:`str` ]): a list of include directories
        target_defines (:obj:`list` [:obj:`str` ]): a list of macros
        host_sources (:obj:`list` [:obj:`str` ]): a list of test host source files
        host_includes (:obj:`list` [:obj:`str` ]): a list of include directories
        host_defines (:obj:`list` [:obj:`str` ]): a list of macros
        host_args (:obj:`list` [:obj:`str` ]): a list of args for running the simulation
        io_bindings (:obj:`str`): the name of the IO binding constraints file
        testbench (:obj:`str`): the name of the testbench generated by simproj.tbgen
        synth (:obj:`str`): the name of the synth script generated by simproj.ysgen
        compiler ('iverilog' or 'vcs'): the compiler for simulation
        fpga_prefix (:obj:`str`): the directory containing all FPGA files
        post_synthesis_sim (:obj:`bool`): if set, rules are injected for post-synthesis simulation
        **kwargs: optional key-value arguments specific to a configuration circuitry type
    """
    # validate arguments
    if compiler == 'iverilog' and post_synthesis_sim:
        raise RuntimeError("Post-synthesis simulation does not work with Icarus Verilog.")

    # get Makefile template
    env = jj.Environment(loader=jj.FileSystemLoader(
        os.path.join(os.path.abspath(os.path.dirname(__file__)), 'makefile_templates')))

    # generate Makefile
    open(output, 'wb' if _py3 else 'w').write(env.get_template('bitchain.tmpl.Makefile').render({
        'testbench': testbench,
        'target': target,
        'target_sources': target_sources,
        'target_includes': target_includes,
        'target_defines': target_defines,
        'host_sources': host_sources,
        'host_includes': host_includes,
        'host_defines': host_defines,
        'host_args': host_args,
        'arch_width': context.top.width,
        'arch_height': context.top.width,
        'vpr_chan_width': context._ext["channel_width"],
        'io_bindings': io_bindings,
        'fpga_prefix': fpga_prefix,
        'vpr_archdef': vpr_archdef,
        'vpr_rrgraph': vpr_rrgraph,
        'config_db': config_db,
        'rtl_dir': rtl_dir,
        'arch_config_type': 'bitchain',
        'bitgen_args': '--memh_width={}'.format(kwargs.pop('bs_wordsize', 16)),
        'synth': synth,
        'compiler': compiler,
        'fake_prog': fake_prog,
        'post_synthesis_sim': post_synthesis_sim
        }).encode('ascii'))
