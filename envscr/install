#!/usr/bin/env bash

# Choose your desired compiler
COMP=gcc
MAKE_JOBCOUNT=8
PYTHON_VERSION=3.8.1

# Do not modify below this line
CWD=${PWD}
cd "$( dirname "${BASH_SOURCE[0]}" )"/..    # move to PRGA_ROOT

trap "cd ${CWD}" EXIT
trap "cd ${CWD}" SIGINT

function err() {
    >&2 echo -e "\033[0;31m[ERROR]\033[0m" $@
    exit 1
}

function info() {
    echo -e "\033[0;34m[INFO]\033[0m" $@
}

# find git
GIT=$( command -v git 2>/dev/null )
if [ -z "${GIT}" ]; then
    err "'git' not found"
fi
info "Using 'git': ${GIT}"

# find make
MAKE=$( command -v make 2>/dev/null )
if [ -z "${MAKE}" ]; then
    err "'make' not found"
fi
info "Using 'make': ${MAKE}"

# find cmake
CMAKE=$( command -v cmake3 2>/dev/null )
if [ -z "${CMAKE}" ]; then
    CMAKE=$( command -v cmake 2>/dev/null )
    if [ -z "${CMAKE}" ]; then
        err "'cmake' not found"
    elif [[ $( ${CMAKE} --version | cut -d " " -f 3 ) != "3"* ]]; then
        err "CMake 3.x is required to build VPR"
    fi
fi
info "Using 'cmake': ${CMAKE}"

if [ -z "${COMP}" ]; then
    COMP=gcc
fi

if [ -z "${MAKE_JOBCOUNT}" ]; then
    MAKE_JOBCOUNT=8
fi

# find C compiler
CC=$( command -v ${COMP} 2>/dev/null )
if [ -z "${CC}" ]; then
    err "'${COMP}' not found"
fi
info "Using '${COMP}': ${CC}"

# find or install pyenv
if command -v pyenv 2>&1 >/dev/null; then
    info "Active 'pyenv' found. Skipping installation/activation of 'pyenv'"
else
    if [ ! -f pyenv/bin/pyenv ]; then
        info "'pyenv' not found. Installing 'pyenv' locally to ${PWD}/pyenv"
        ${GIT} clone https://github.com/pyenv/pyenv.git || exit 1
        info "'pyenv' installed locally to ${PWD}/pyenv"
    else
        info "Locally-installed 'pyenv' found. Skipping installation of 'pyenv'"
    fi

    info "Activating locally-installed 'pyenv'"
    export PYENV_ROOT=${PWD}/pyenv
    export PATH=${PYENV_ROOT}/bin:$PATH
    eval "$( pyenv init - )"
    info "'pyenv' activated"
fi

# install the desired python if it's not installed already
if [ -z "${PYTHON_VERSION}" ]; then
    PYTHON_VERSION=3.8.1
fi
info "Installing Python ${PYTHON_VERSION} with 'pyenv'"
pyenv install -s ${PYTHON_VERSION} || exit 1
info "Python ${PYTHON_VERSION} installed with 'pyenv'"
pyenv local ${PYTHON_VERSION} || exit 1
if [[ $( python --version | cut -d " " -f 2 ) != "${PYTHON_VERSION}" ]]; then
    err "'pyenv' is not choosing the correct Python version"
fi
info "Python ${PYTHON_VERSION} chosen as the local version"

# install pipenv
if [ -z "$( pip show pipenv 2>&1 >/dev/null )" ]; then
    info "'pipenv' already installed. Skipping installation of 'pipenv'"
else
    info "Installing 'pipenv'"
    pip install pipenv || exit 1
    info "'pipenv' installed"
fi

# check out submodules
info "Checking out submodules"
${GIT} submodule update --init --recursive || exit 1

mkdir -p local

# build VTR
info "Building VTR"
cd vtr
${MAKE} -j${MAKE_JOBCOUNT} CMAKE=${CMAKE} || exit 1
cd ..
info "VTR built successfully"

# build yosys
info "Building Yosys"
cd yosys
${MAKE} -j${MAKE_JOBCOUNT} CONFIG=${COMP} || exit 1
${MAKE} install CONFIG=${COMP} PREFIX=${PWD}/../local || exit 1
cd ..
info "Yosys built successfully"

# link all binaries
info "Linking binaries to ${PWD}/local/bin"
cd local/bin
ln -s -f ../../vtr/vpr/vpr vpr
ln -s -f ../../vtr/build/utils/fasm/genfasm genfasm
cd ../..

# build a virtualenv for prga.py
info "Creating a virtual environment for prga.py"
cd prga.py
rm -rf Pipfile*
pipenv --rm 2>&1 >/dev/null || exit 1
PIPENV_VENV_IN_PROJECT=1 pipenv --python ${PYTHON_VERSION} install -e . || exit 1
cd ..
info "Virtual environment created for prga.py"

info "Installation finished successfully"

# vim: set ft=sh:
