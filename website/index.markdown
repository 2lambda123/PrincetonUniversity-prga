---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: splash
title: Princeton Reconfigurable Gate Array
excerpt: >-
  Build your own FPGA Chip or embedded FPGA IP with Python, and enjoy a fully
  open-source CAD flow auto-generated specifically for your custom FPGA.
header:
  overlay_image: /assets/images/splash.png
  actions:
    - label: GitHub
      icon: "fab fa-fw fa-github"
      url: "https://github.com/PrincetonUniversity/prga"
    - label: Documentation
      icon: "fas fa-book"
      url: "https://prga.readthedocs.io"

feature_row_0:
  - title: Intuitive Python API
    excerpt: >-
      PRGA is written in Python with an intuitive, modularized, and
      highly extensible API. Enjoy the smoothness of developing in a
      high-level programming language!
    actions:
      - url: https://prga.readthedocs.io/
        btn_label: Documentation
        btn_class: btn--inverse
  
  - title: Templated File Generation
    excerpt: >-
      PRGA generates most files based on parameterized
      [Jinja](https://jinja.palletsprojects.com) templates.
      Feel free to replace the templates without changing your Python code!
    actions:
      - btn_label: Learn more about Jinja
        url: https://jinja.palletsprojects.com
        btn_class: btn--link

  - title: Open-Source CAD Tools
    excerpt: >-
      PRGA auto-generates scripts for implementing target applications on
      your custom FPGA with open-source CAD tools, e.g.
      [Yosys](http://www.clifford.at/yosys/),
      [VPR](https://verilogtorouting.org/), etc.
    actions:
      - btn_label: Learn more about Yosys
        url: http://www.clifford.at/yosys/
        btn_class: btn--link
      - btn_label: Learn more about VPR
        url: https://verilogtorouting.org/
        btn_class: btn--link

feature_row_1:
  - title: Customizable Architecture
    excerpt: >-
      PRGA features a highly customizable FPGA architecture at various
      levels. You are also welcome to bring your own designs or any
      third-party/proprietary IPs into your custom FPGAs!
    # actions:
    #   - btn_label: Learn more
    #     url: /architecture
    #     btn_class: btn--link

  - title: ASIC-friendly RTL
    excerpt: >-
      PRGA-generated RTL is highly ASIC-friendly, both for implementation,
      characterization, and verification.
    # actions:
    #   - btn_label: Learn more
    #     url: /asic
    #     btn_class: btn--link

  - title: Incremental Verification
    excerpt: >-
      From behavioral simulation, to post-synthesis, LUT-based simulation,
      all the way to post-implementation simulation, PRGA features
      automated, incremental verification.
    # actions:
    #   - btn_label: Learn more
    #     url: /verification
    #     btn_class: btn--link

feature_section_0:
  image_path: /assets/images/logo.png
  title: Princeton Reconfigurable Gate Array
  excerpt: >-
    Design, customize, and build your own FPGA!

      * Study FPGA architecture with accurate, gate-level timing,
        area and power characterization.
      * Research novel configuration protocol, e.g. partial reconfiguration,
        dynamic reconfiguration, multi-context FPGA, and secure bitstream!
      * Integrate an open-source embedded FPGA IP in your next SoC design!
      * And more...

feature_section_1:
  image_path: /assets/images/picosoc.PNG
  image_position: right
  title: Bring Your Own IPs into the Heterogeneous Architecture
  excerpt: >-
    This custom FPGA has an embedded hard
    [PicoRV32](https://github.com/cliffordwolf/picorv32) core (the large orange
    block in the middle), in addition to two types of CLBs (light and dark purple
    blocks), and some BRAM blocks (narrow cyan blocks).
    This figures shows the
    [picosoc](https://github.com/cliffordwolf/picorv32/tree/master/picosoc)
    design implemented on this custom FPGA.

      * Figure generated by [VPR](https://verilogtorouting.org/)

    [Try it youself](https://github.com/PrincetonUniversity/prga/tree/release/examples/target/picosoc/magic_hardpico){: .btn .btn--primary }

feature_section_2:
  image_path: /assets/images/multimode.PNG
  title: Multi-Modal Primitives
  excerpt: >-
    Increase the utilization rate of gates with multi-modal primitives. 
    
      * `LUT3` = 2 `LUT2`s with shared inputs
      * 8Kbit RAM can be used as `256x64b`, `512x32b`, `1024x16b`, ...
      * Also feel free to design your own multi-modal primitives!
---

{% include feature_row id="feature_row_0" %}
{% include feature_row id="feature_row_1" %}

{% include feature_section id="feature_section_0" %}
{% include feature_section id="feature_section_1" %}
{% include feature_section id="feature_section_2" %}
