# -*- encoding: ascii -*-

"""Generate the simulation project's Makefile."""

from prga._configcircuitry.common import ConfigurationCircuitryType
from hdlparse.verilog_parser import VerilogExtractor as Vex 

import jinja2 as jj
import os

def generate_makefile(context, output, target, host, io_bindings, testbench, synth,
        vpr_archdef = 'archdef.vpr.xml',
        vpr_rrgraph = 'rrgraph.vpr.xml',
        config_db = 'config.db',
        rtl_dir = 'rtl',
        **kwargs):
    """Generate the simulation project's Makefile.

    Args:
        context (`ArchitectureContext`): the architecture context of the custom FPGA
        output (:obj:`str`): the name of the output file
        target (:obj:`str`): the name of the target Verilog file
        host (:obj:str`): the name of the test host verilog file
        io_bindings (:obj:`str`): the name of the IO binding constraints file
        testbench (:obj:`str`): the name of the testbench generated by simproj.tbgen
        synth (:obj:`str`): the name of the synth script generated by simproj.ysgen
        **kwargs: optional key-value arguments specific to a configuration circuitry type
    """
    # check configuration circuitry type
    cfg_ext = context._config_extension
    if cfg_ext is None:
        raise RuntimeError("Configuration circuitry has not been injected into the architecture")

    # check VPR extension
    vpr_ext = context._vpr_extension
    if vpr_ext is None:
        raise RuntimeError("VPR data has not been generated for the architecture")

    # get Makefile template
    env = jj.Environment(loader=jj.FileSystemLoader(
        os.path.join(os.path.abspath(os.path.dirname(__file__)), 'makefile_templates')))

    # extract target information
    target_mod = Vex().extract_objects(target)
    if len(target_mod) != 1:
        raise RuntimeError('Only one module is allowed in TARGET.v')
    target_mod = target_mod[0]

    # generate Makefile
    if cfg_ext.type is ConfigurationCircuitryType.bitchain:
        open(output, 'w').write(env.get_template('bitchain.tmpl.Makefile').render({
            'testbench': testbench,
            'target': target_mod.name,
            'target_src': target,
            'host_src': host,
            'arch_width': context.array.width,
            'arch_height': context.array.width,
            'vpr_chan_width': vpr_ext.channel_width,
            'io_bindings': io_bindings,
            'vpr_archdef': vpr_archdef,
            'vpr_rrgraph': vpr_rrgraph,
            'config_db': config_db,
            'rtl_dir': rtl_dir,
            'arch_config_type': cfg_ext.type.name,
            'bitgen_args': '--memh_width={}'.format(kwargs.pop('bs_wordsize', 16)),
            'synth': synth,
            }).encode('ascii'))
    else:
        raise RuntimeError("Unknown configuration circuitry type: {}".format(
            cfg_ext.type.name))
